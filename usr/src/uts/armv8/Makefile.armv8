#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# Copyright (c) 2013 Andrew Stormont.  All rights reserved.
# Copyright 2017 Hayashi Naoyuki
# Copyright 2019 Joyent, Inc.
# Copyright 2025 Michael van der Westhuizen
#
#	This makefile contains the common definitions for the armv8 unix
#	and all armv8 implementation architecture dependent modules.
#

#
#	Machine type (implementation architecture):
#
PLATFORM	 = armv8

#
#	uname -m value
#
UNAME_M		= $(PLATFORM)

#
# Definitions for the platform-specific /platform directories.
#
# PLATFORMS designates those armv8 machines which have no platform
# specific code.
#
# IMPLEMENTATIONS is used to designate armv8 machines which have
# platform specific modules.  All code specific to a given implementation
# resides in the appropriately named subdirectory.   This requires
# these platforms to have their own Makefiles to define ROOT_PLAT_DIRS,
# USR_PLAT_DIRS, etc.
#
# So if we had an implementation named 'foo', we would need the following
# Makefiles in the foo subdirectory:
#
#	armv8/foo/Makefile
#	armv8/foo/Makefile.foo
#	armv8/foo/Makefile.targ
#

#
# all PLATFORMS that do not belong in the $(IMPLEMENTATIONS) list.
# This list should be empty.  A platform without platform modules
# is a plain, generic armv8 platform.
#
#IMPLEMENTED_PLATFORM	=
#PLATFORMS		= $(IMPLEMENTED_PLATFORM)

IMPLEMENTATIONS		= rpi4 virt

#ROOT_PLAT_DIRS		= $(PLATFORMS:%=$(ROOT_PLAT_DIR)/%)
#USR_PLAT_DIRS		= $(PLATFORMS:%=$(USR_PLAT_DIR)/%)

#USR_DESKTOP_DIR		= $(USR_PLAT_DIR)/$(IMPLEMENTED_PLATFORM)
#USR_DESKTOP_INC_DIR	= $(USR_DESKTOP_DIR)/include
#USR_DESKTOP_SBIN_DIR	= $(USR_DESKTOP_DIR)/sbin
#USR_DESKTOP_LIB_DIR	= $(USR_DESKTOP_DIR)/lib

#
#	Define supported builds
#
DEF_BUILDS	= $(DEF_BUILDSONLY64)
ALL_BUILDS	= $(ALL_BUILDSONLY64)

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o
#
UNIX_DIR	 = $(UTSBASE)/armv8/unix
GENLIB_DIR	 = $(UTSBASE)/aarch64/genunix
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = .

DTRACESTUBS_O	 = $(OBJS_DIR)/dtracestubs.o
DTRACESTUBS	 = $(OBJS_DIR)/libdtracestubs.so

UNIX_O		 = $(UNIX_DIR)/$(OBJS_DIR)/unix.o
MODSTUBS_O	 = $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o
GENLIB		 = $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so

PLATMOD		 = platmod
PLATLIB		 = $(PLAT_DIR)/$(OBJS_DIR)/libplatmod.so

SYM_MOD		= $(OBJS_DIR)/unix.sym

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSBASE)/armv8/Makefile.files
include $(UTSBASE)/aarch64/Makefile.files
include $(UTSBASE)/common/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	kernel-specific optimizations; override default in Makefile.master
#

CFLAGS_XARCH		= $($(MACH)_CFLAGS)

COPTIMIZE		= $(COPTFLAG)

CFLAGS			= $(CFLAGS_XARCH)
CFLAGS			+= $(COPTIMIZE)
CFLAGS			+= $(INLINES) -D_ASM_INLINES
CFLAGS			+= $(CCMODE)
CFLAGS			+= $(SPACEFLAG)
CFLAGS			+= $(CCUNBOUND)
CFLAGS			+= $(CFLAGS_uts)
CFLAGS			+= $(STACKPROTECT_$(STACKPROTECT))

INC_PATH		+= -I$(UTSBASE)/armv8
INC_PATH		+= -I$(UTSBASE)/$(MACH)
INC_PATH		+= -I$(COMMONBASE)

ASFLAGS_XARCH		= $($(MACH)_ASFLAGS)

ASFLAGS			+= $(ASFLAGS_XARCH)

AS_INC_PATH		+= -I$(DSF_DIR)/$(OBJS_DIR)

#
#	The following must be defined for all implementations:
#
#	MAPFILE:	ld mapfile for the build of kernel/unix.
#	MODSTUBS:	Module stubs source file.
#
MAPFILE		 = $(UTSBASE)/armv8/conf/Mapfile
MODSTUBS	 = $(UTSBASE)/aarch64/ml/modstubs.S

#
#	Define the actual specific platforms
#
MACHINE_DEFS	 = -D$(PLATFORM) -D$(MACH) -D_MACHDEP

#
#	Debugging level
#
#	Special knowledge of which special debugging options effect which
#	file is used to optimize the build if these flags are changed.
#
#	XXX: The above could possibly be done for more flags and files, but
#	     is left as an experiment to the interested reader. Be forewarned,
#	     that excessive use could lead to maintenance difficulties.
#

DEBUG_DEFS_OBJ64	=
DEBUG_DEFS_DBG64	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ64	= $(POUND_SIGN)
DEBUG_COND_DBG64	=
IF_DEBUG_OBJ		= $(DEBUG_COND_$(BUILD_TYPE))$(OBJS_DIR)/

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(MACHINE_DEFS) $(DEBUG_DEFS) \
		   $(OPTION_DEFS)
GENASSYM_DEFS	 = $(MACHINE_DEFS) $(OPTION_DEFS) \
			-_gcc=-fno-eliminate-unused-debug-symbols \
			-_gcc=-fno-eliminate-unused-debug-types

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv):
#

#
#	Machine Specific Driver Modules (/kernel/drv):
#
DRV_KMODS += arm_gtmr
DRV_KMODS += simple-bus
DRV_KMODS += rootnex
DRV_KMODS += ns16550a
DRV_KMODS += gictwo
DRV_KMODS += gicthree
DRV_KMODS += pl03one

#
#	'Dacf' Modules (/kernel/dacf):
#
DACF_KMODS += consconfig_dacf

#
#	'Misc' Modules (/kernel/misc):
#
MISC_KMODS += platmod
